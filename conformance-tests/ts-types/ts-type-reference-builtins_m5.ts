type A = any
type B = any
type MyAwaited = Awaited<A>
type MyPartial = Partial<A>
type MyRequired = Required<A>
type MyReadonly = Readonly<A>
type MyRecord = Record<A, B>
type MyPick = Pick<A, B>
type MyOmit = Omit<A, B>
type MyExclude = Exclude<A, B>
type MyExtract = Extract<A, B>
type MyNonNullable = NonNullable<A>
type MyParameters = Parameters<A>
type MyConstructorParameters = ConstructorParameters<A>
type MyReturnType = ReturnType<A>
type MyInstanceType = InstanceType<A>
type MyThisParameterType = ThisParameterType<A>
type MyOmitThisParameter = OmitThisParameter<A>
type MyThisType = ThisType<A>
type MyUppercase = Uppercase<A>
type MyLowercase = Lowercase<A>
type MyCapitalize = Capitalize<A>
type MyUncapitalize = Uncapitalize<A>
